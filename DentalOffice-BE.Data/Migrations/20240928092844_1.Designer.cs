// <auto-generated />
using System;
using DentalOffice_BE.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DentalOffice_BE.Data.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20240928092844_1")]
    partial class _1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DentalOffice_BE.Data.ColorDto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("insert_date")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("colors", "main");
                });

            modelBuilder.Entity("DentalOffice_BE.Data.CustomerDto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("insert_date")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("customers", "main");
                });

            modelBuilder.Entity("DentalOffice_BE.Data.DocumentConfigurationDto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("insert_date")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("Order")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("document_configurations", "main");
                });

            modelBuilder.Entity("DentalOffice_BE.Data.DocumentInstanceDto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ConfigurationId")
                        .HasColumnType("bigint")
                        .HasColumnName("configuration_id");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("insert_date")
                        .HasDefaultValueSql("NOW()");

                    b.Property<long>("ModuleId")
                        .HasColumnType("bigint")
                        .HasColumnName("module_id");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("ConfigurationId");

                    b.HasIndex("ModuleId");

                    b.ToTable("document_instances", "main");
                });

            modelBuilder.Entity("DentalOffice_BE.Data.LotDto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<long?>("ColorId")
                        .HasColumnType("bigint")
                        .HasColumnName("color_id");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("insert_date")
                        .HasDefaultValueSql("NOW()");

                    b.Property<long>("MaterialId")
                        .HasColumnType("bigint")
                        .HasColumnName("material_id");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("MaterialId");

                    b.ToTable("lots", "main");
                });

            modelBuilder.Entity("DentalOffice_BE.Data.MaterialDto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("insert_date")
                        .HasDefaultValueSql("NOW()");

                    b.Property<object>("MaterialProperties")
                        .HasColumnType("jsonb")
                        .HasAnnotation("Relational:JsonPropertyName", "materialProperties");

                    b.Property<long>("MaterialTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("material_type_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("MaterialTypeId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("materials", "main");
                });

            modelBuilder.Entity("DentalOffice_BE.Data.MaterialTypeDto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("insert_date")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("material_types", "main");
                });

            modelBuilder.Entity("DentalOffice_BE.Data.ModuleDto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("customer_name");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("delivery_date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("insert_date")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime?>("PrescriptionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("prescription_date");

                    b.Property<long>("StudioId")
                        .HasColumnType("bigint")
                        .HasColumnName("studio_id");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("StudioId");

                    b.ToTable("modules", "main");
                });

            modelBuilder.Entity("DentalOffice_BE.Data.ProcessDto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("ColorDtoId")
                        .HasColumnType("bigint");

                    b.Property<long>("ColorId")
                        .HasColumnType("bigint")
                        .HasColumnName("color_id");

                    b.Property<long>("DentinLotId")
                        .HasColumnType("bigint")
                        .HasColumnName("dentin_lot_id");

                    b.Property<long>("DentinMaterialId")
                        .HasColumnType("bigint")
                        .HasColumnName("dentin_material_id");

                    b.Property<long>("EnamelLotId")
                        .HasColumnType("bigint")
                        .HasColumnName("enamel_lot_id");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("insert_date")
                        .HasDefaultValueSql("NOW()");

                    b.Property<long>("MetalLotId")
                        .HasColumnType("bigint")
                        .HasColumnName("metal_lot_id");

                    b.Property<long>("MetalMaterialId")
                        .HasColumnType("bigint")
                        .HasColumnName("metal_material_id");

                    b.Property<long?>("ModuleDtoId")
                        .HasColumnType("bigint");

                    b.Property<long>("ModuleId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RiskDtoId")
                        .HasColumnType("bigint");

                    b.Property<long>("RiskId")
                        .HasColumnType("bigint")
                        .HasColumnName("risk_id");

                    b.Property<long?>("SemiProductId")
                        .HasColumnType("bigint")
                        .HasColumnName("semiproduct_id");

                    b.Property<long[]>("StagesIds")
                        .HasColumnType("bigint[]");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("ColorDtoId");

                    b.HasIndex("ColorId");

                    b.HasIndex("DentinLotId");

                    b.HasIndex("DentinMaterialId");

                    b.HasIndex("EnamelLotId");

                    b.HasIndex("MetalLotId");

                    b.HasIndex("MetalMaterialId");

                    b.HasIndex("ModuleDtoId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("RiskDtoId");

                    b.HasIndex("RiskId");

                    b.HasIndex("SemiProductId");

                    b.ToTable("processes", "main");
                });

            modelBuilder.Entity("DentalOffice_BE.Data.RiskDto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("insert_date")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("Description")
                        .IsUnique();

                    b.ToTable("risks", "main");
                });

            modelBuilder.Entity("DentalOffice_BE.Data.SectionDto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ApiString")
                        .HasColumnType("text")
                        .HasColumnName("api_string");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("insert_date")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Route")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("route");

                    b.Property<long?>("SectionId")
                        .HasColumnType("bigint")
                        .HasColumnName("section_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("Route")
                        .IsUnique();

                    b.HasIndex("SectionId");

                    b.ToTable("sections", "main");
                });

            modelBuilder.Entity("DentalOffice_BE.Data.SemiProductDto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("insert_date")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("semiproducts", "main");
                });

            modelBuilder.Entity("DentalOffice_BE.Data.StageDto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("insert_date")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("stages", "main");
                });

            modelBuilder.Entity("DentalOffice_BE.Data.StudioDto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Color")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("color");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("insert_date")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("studios", "main");
                });

            modelBuilder.Entity("processes_stages", b =>
                {
                    b.Property<long>("ProcessesId")
                        .HasColumnType("bigint");

                    b.Property<long>("StagesId")
                        .HasColumnType("bigint");

                    b.HasKey("ProcessesId", "StagesId");

                    b.HasIndex("StagesId");

                    b.ToTable("processes_stages", "main");
                });

            modelBuilder.Entity("DentalOffice_BE.Data.DocumentInstanceDto", b =>
                {
                    b.HasOne("DentalOffice_BE.Data.DocumentConfigurationDto", "Configuration")
                        .WithMany("Instances")
                        .HasForeignKey("ConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DentalOffice_BE.Data.ModuleDto", "Module")
                        .WithMany("DocumentInstances")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Configuration");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("DentalOffice_BE.Data.LotDto", b =>
                {
                    b.HasOne("DentalOffice_BE.Data.ColorDto", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId");

                    b.HasOne("DentalOffice_BE.Data.MaterialDto", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("DentalOffice_BE.Data.MaterialDto", b =>
                {
                    b.HasOne("DentalOffice_BE.Data.MaterialTypeDto", "MaterialType")
                        .WithMany("Materials")
                        .HasForeignKey("MaterialTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaterialType");
                });

            modelBuilder.Entity("DentalOffice_BE.Data.ModuleDto", b =>
                {
                    b.HasOne("DentalOffice_BE.Data.StudioDto", "Studio")
                        .WithMany()
                        .HasForeignKey("StudioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Studio");
                });

            modelBuilder.Entity("DentalOffice_BE.Data.ProcessDto", b =>
                {
                    b.HasOne("DentalOffice_BE.Data.ColorDto", null)
                        .WithMany("Processes")
                        .HasForeignKey("ColorDtoId");

                    b.HasOne("DentalOffice_BE.Data.ColorDto", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DentalOffice_BE.Data.LotDto", "DentinLot")
                        .WithMany()
                        .HasForeignKey("DentinLotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DentalOffice_BE.Data.MaterialDto", "DentinMaterial")
                        .WithMany()
                        .HasForeignKey("DentinMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DentalOffice_BE.Data.LotDto", "EnamelLot")
                        .WithMany()
                        .HasForeignKey("EnamelLotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DentalOffice_BE.Data.LotDto", "MetalLot")
                        .WithMany()
                        .HasForeignKey("MetalLotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DentalOffice_BE.Data.MaterialDto", "MetalMaterial")
                        .WithMany()
                        .HasForeignKey("MetalMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DentalOffice_BE.Data.ModuleDto", null)
                        .WithMany("Processes")
                        .HasForeignKey("ModuleDtoId");

                    b.HasOne("DentalOffice_BE.Data.ModuleDto", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DentalOffice_BE.Data.RiskDto", null)
                        .WithMany("Processes")
                        .HasForeignKey("RiskDtoId");

                    b.HasOne("DentalOffice_BE.Data.RiskDto", "Risk")
                        .WithMany()
                        .HasForeignKey("RiskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DentalOffice_BE.Data.SemiProductDto", "SemiProduct")
                        .WithMany("Processs")
                        .HasForeignKey("SemiProductId");

                    b.Navigation("Color");

                    b.Navigation("DentinLot");

                    b.Navigation("DentinMaterial");

                    b.Navigation("EnamelLot");

                    b.Navigation("MetalLot");

                    b.Navigation("MetalMaterial");

                    b.Navigation("Module");

                    b.Navigation("Risk");

                    b.Navigation("SemiProduct");
                });

            modelBuilder.Entity("DentalOffice_BE.Data.SectionDto", b =>
                {
                    b.HasOne("DentalOffice_BE.Data.SectionDto", "Section")
                        .WithMany("SubSections")
                        .HasForeignKey("SectionId");

                    b.OwnsOne("DentalOffice_BE.Common.SectionConfiguration", "Configuration", b1 =>
                        {
                            b1.Property<long>("SectionDtoId")
                                .HasColumnType("bigint");

                            b1.Property<string>("IconName")
                                .HasColumnType("text")
                                .HasAnnotation("Relational:JsonPropertyName", "iconName");

                            b1.HasKey("SectionDtoId");

                            b1.ToTable("sections", "main");

                            b1.ToJson("Configuration");

                            b1.WithOwner()
                                .HasForeignKey("SectionDtoId");

                            b1.OwnsMany("DentalOffice_BE.Common.FormGroupConfiguration", "FormConfiguration", b2 =>
                                {
                                    b2.Property<long>("SectionConfigurationSectionDtoId")
                                        .HasColumnType("bigint");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<string>("FieldGroupClassName")
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "fieldGroupClassName");

                                    b2.HasKey("SectionConfigurationSectionDtoId", "Id");

                                    b2.ToTable("sections", "main");

                                    b2.HasAnnotation("Relational:JsonPropertyName", "formConfiguration");

                                    b2.WithOwner()
                                        .HasForeignKey("SectionConfigurationSectionDtoId");

                                    b2.OwnsMany("DentalOffice_BE.Common.FormFieldConfiguration", "FieldGroup", b3 =>
                                        {
                                            b3.Property<long>("FormGroupConfigurationSectionConfigurationSectionDtoId")
                                                .HasColumnType("bigint");

                                            b3.Property<int>("FormGroupConfigurationId")
                                                .HasColumnType("integer");

                                            b3.Property<int>("Id")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("integer");

                                            b3.Property<string>("ClassName")
                                                .HasColumnType("text")
                                                .HasAnnotation("Relational:JsonPropertyName", "className");

                                            b3.Property<string>("Key")
                                                .IsRequired()
                                                .HasColumnType("text")
                                                .HasAnnotation("Relational:JsonPropertyName", "key");

                                            b3.Property<string>("Type")
                                                .IsRequired()
                                                .HasColumnType("text")
                                                .HasAnnotation("Relational:JsonPropertyName", "type");

                                            b3.HasKey("FormGroupConfigurationSectionConfigurationSectionDtoId", "FormGroupConfigurationId", "Id");

                                            b3.ToTable("sections", "main");

                                            b3.HasAnnotation("Relational:JsonPropertyName", "fieldGroup");

                                            b3.WithOwner()
                                                .HasForeignKey("FormGroupConfigurationSectionConfigurationSectionDtoId", "FormGroupConfigurationId");

                                            b3.OwnsMany("DentalOffice_BE.Common.FormFieldConfiguration.FieldGroup#FormFieldConfiguration", "FieldGroup", b4 =>
                                                {
                                                    b4.Property<long>("FormFieldConfigurationFormGroupConfigurationSectionConfigurationSectionDtoId")
                                                        .HasColumnType("bigint")
                                                        .HasColumnName("FormFieldConfigurationFormGroupConfigurationSectionConfigurati~");

                                                    b4.Property<int>("FormFieldConfigurationFormGroupConfigurationId")
                                                        .HasColumnType("integer");

                                                    b4.Property<int>("FormFieldConfigurationId")
                                                        .HasColumnType("integer");

                                                    b4.Property<int>("Id")
                                                        .ValueGeneratedOnAdd()
                                                        .HasColumnType("integer");

                                                    b4.Property<string>("ClassName")
                                                        .HasColumnType("text")
                                                        .HasAnnotation("Relational:JsonPropertyName", "className");

                                                    b4.Property<string>("Key")
                                                        .IsRequired()
                                                        .HasColumnType("text")
                                                        .HasAnnotation("Relational:JsonPropertyName", "key");

                                                    b4.Property<string>("Type")
                                                        .IsRequired()
                                                        .HasColumnType("text")
                                                        .HasAnnotation("Relational:JsonPropertyName", "type");

                                                    b4.HasKey("FormFieldConfigurationFormGroupConfigurationSectionConfigurationSectionDtoId", "FormFieldConfigurationFormGroupConfigurationId", "FormFieldConfigurationId", "Id");

                                                    b4.ToTable("sections", "main");

                                                    b4.HasAnnotation("Relational:JsonPropertyName", "fieldGroup");

                                                    b4.WithOwner()
                                                        .HasForeignKey("FormFieldConfigurationFormGroupConfigurationSectionConfigurationSectionDtoId", "FormFieldConfigurationFormGroupConfigurationId", "FormFieldConfigurationId");

                                                    b4.OwnsOne("DentalOffice_BE.Common.FormFieldProps", "Props", b5 =>
                                                        {
                                                            b5.Property<long>("FormFieldConfigurationFormGroupConfigurationSectionConfigurationSectionDtoId")
                                                                .HasColumnType("bigint")
                                                                .HasColumnName("FormFieldConfigurationFormGroupConfigurationSectionConfigurati~");

                                                            b5.Property<int>("FormFieldConfigurationFormGroupConfigurationId")
                                                                .HasColumnType("integer");

                                                            b5.Property<int>("FormFieldConfigurationId")
                                                                .HasColumnType("integer");

                                                            b5.Property<int>("FormFieldConfigurationId1")
                                                                .HasColumnType("integer");

                                                            b5.Property<string>("Label")
                                                                .HasColumnType("text")
                                                                .HasAnnotation("Relational:JsonPropertyName", "label");

                                                            b5.Property<bool?>("Required")
                                                                .HasColumnType("boolean")
                                                                .HasAnnotation("Relational:JsonPropertyName", "required");

                                                            b5.HasKey("FormFieldConfigurationFormGroupConfigurationSectionConfigurationSectionDtoId", "FormFieldConfigurationFormGroupConfigurationId", "FormFieldConfigurationId", "FormFieldConfigurationId1");

                                                            b5.ToTable("sections", "main");

                                                            b5.HasAnnotation("Relational:JsonPropertyName", "props");

                                                            b5.WithOwner()
                                                                .HasForeignKey("FormFieldConfigurationFormGroupConfigurationSectionConfigurationSectionDtoId", "FormFieldConfigurationFormGroupConfigurationId", "FormFieldConfigurationId", "FormFieldConfigurationId1");

                                                            b5.OwnsMany("DentalOffice_BE.Common.FormFieldPropsOption", "Options", b6 =>
                                                                {
                                                                    b6.Property<long>("FormFieldPropsFormFieldConfigurationFormGroupConfigurationSectionConfigurationSectionDtoId")
                                                                        .HasColumnType("bigint")
                                                                        .HasColumnName("FormFieldPropsFormFieldConfigurationFormGroupConfigurationSect~");

                                                                    b6.Property<int>("FormFieldPropsFormFieldConfigurationFormGroupConfigurationId")
                                                                        .HasColumnType("integer");

                                                                    b6.Property<int>("FormFieldPropsFormFieldConfigurationId")
                                                                        .HasColumnType("integer");

                                                                    b6.Property<int>("FormFieldPropsFormFieldConfigurationId1")
                                                                        .HasColumnType("integer");

                                                                    b6.Property<int>("Id")
                                                                        .ValueGeneratedOnAdd()
                                                                        .HasColumnType("integer");

                                                                    b6.Property<string>("Label")
                                                                        .HasColumnType("text")
                                                                        .HasAnnotation("Relational:JsonPropertyName", "label");

                                                                    b6.Property<long?>("Value")
                                                                        .HasColumnType("bigint")
                                                                        .HasAnnotation("Relational:JsonPropertyName", "value");

                                                                    b6.HasKey("FormFieldPropsFormFieldConfigurationFormGroupConfigurationSectionConfigurationSectionDtoId", "FormFieldPropsFormFieldConfigurationFormGroupConfigurationId", "FormFieldPropsFormFieldConfigurationId", "FormFieldPropsFormFieldConfigurationId1", "Id");

                                                                    b6.ToTable("sections", "main");

                                                                    b6.HasAnnotation("Relational:JsonPropertyName", "options");

                                                                    b6.WithOwner()
                                                                        .HasForeignKey("FormFieldPropsFormFieldConfigurationFormGroupConfigurationSectionConfigurationSectionDtoId", "FormFieldPropsFormFieldConfigurationFormGroupConfigurationId", "FormFieldPropsFormFieldConfigurationId", "FormFieldPropsFormFieldConfigurationId1");
                                                                });

                                                            b5.Navigation("Options");
                                                        });

                                                    b4.Navigation("Props");
                                                });

                                            b3.OwnsOne("DentalOffice_BE.Common.FormFieldProps", "Props", b4 =>
                                                {
                                                    b4.Property<long>("FormFieldConfigurationFormGroupConfigurationSectionConfigurationSectionDtoId")
                                                        .HasColumnType("bigint")
                                                        .HasColumnName("FormFieldConfigurationFormGroupConfigurationSectionConfigurati~");

                                                    b4.Property<int>("FormFieldConfigurationFormGroupConfigurationId")
                                                        .HasColumnType("integer");

                                                    b4.Property<int>("FormFieldConfigurationId")
                                                        .HasColumnType("integer");

                                                    b4.Property<string>("Label")
                                                        .HasColumnType("text")
                                                        .HasAnnotation("Relational:JsonPropertyName", "label");

                                                    b4.Property<bool?>("Required")
                                                        .HasColumnType("boolean")
                                                        .HasAnnotation("Relational:JsonPropertyName", "required");

                                                    b4.HasKey("FormFieldConfigurationFormGroupConfigurationSectionConfigurationSectionDtoId", "FormFieldConfigurationFormGroupConfigurationId", "FormFieldConfigurationId");

                                                    b4.ToTable("sections", "main");

                                                    b4.HasAnnotation("Relational:JsonPropertyName", "props");

                                                    b4.WithOwner()
                                                        .HasForeignKey("FormFieldConfigurationFormGroupConfigurationSectionConfigurationSectionDtoId", "FormFieldConfigurationFormGroupConfigurationId", "FormFieldConfigurationId");

                                                    b4.OwnsMany("DentalOffice_BE.Common.FormFieldPropsOption", "Options", b5 =>
                                                        {
                                                            b5.Property<long>("FormFieldPropsFormFieldConfigurationFormGroupConfigurationSectionConfigurationSectionDtoId")
                                                                .HasColumnType("bigint")
                                                                .HasColumnName("FormFieldPropsFormFieldConfigurationFormGroupConfigurationSect~");

                                                            b5.Property<int>("FormFieldPropsFormFieldConfigurationFormGroupConfigurationId")
                                                                .HasColumnType("integer");

                                                            b5.Property<int>("FormFieldPropsFormFieldConfigurationId")
                                                                .HasColumnType("integer");

                                                            b5.Property<int>("Id")
                                                                .ValueGeneratedOnAdd()
                                                                .HasColumnType("integer");

                                                            b5.Property<string>("Label")
                                                                .HasColumnType("text")
                                                                .HasAnnotation("Relational:JsonPropertyName", "label");

                                                            b5.Property<long?>("Value")
                                                                .HasColumnType("bigint")
                                                                .HasAnnotation("Relational:JsonPropertyName", "value");

                                                            b5.HasKey("FormFieldPropsFormFieldConfigurationFormGroupConfigurationSectionConfigurationSectionDtoId", "FormFieldPropsFormFieldConfigurationFormGroupConfigurationId", "FormFieldPropsFormFieldConfigurationId", "Id");

                                                            b5.ToTable("sections", "main");

                                                            b5.HasAnnotation("Relational:JsonPropertyName", "options");

                                                            b5.WithOwner()
                                                                .HasForeignKey("FormFieldPropsFormFieldConfigurationFormGroupConfigurationSectionConfigurationSectionDtoId", "FormFieldPropsFormFieldConfigurationFormGroupConfigurationId", "FormFieldPropsFormFieldConfigurationId");
                                                        });

                                                    b4.Navigation("Options");
                                                });

                                            b3.Navigation("FieldGroup");

                                            b3.Navigation("Props");
                                        });

                                    b2.Navigation("FieldGroup");
                                });

                            b1.OwnsMany("DentalOffice_BE.Common.TableHeaderField", "TableHeaderFields", b2 =>
                                {
                                    b2.Property<long>("SectionConfigurationSectionDtoId")
                                        .HasColumnType("bigint");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<string>("CellRenderer")
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "cellRenderer");

                                    b2.Property<string>("Field")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "field");

                                    b2.Property<string>("HeaderName")
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "headerName");

                                    b2.HasKey("SectionConfigurationSectionDtoId", "Id");

                                    b2.ToTable("sections", "main");

                                    b2.HasAnnotation("Relational:JsonPropertyName", "tableHeaderFields");

                                    b2.WithOwner()
                                        .HasForeignKey("SectionConfigurationSectionDtoId");
                                });

                            b1.Navigation("FormConfiguration");

                            b1.Navigation("TableHeaderFields");
                        });

                    b.Navigation("Configuration");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("processes_stages", b =>
                {
                    b.HasOne("DentalOffice_BE.Data.ProcessDto", null)
                        .WithMany()
                        .HasForeignKey("ProcessesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DentalOffice_BE.Data.StageDto", null)
                        .WithMany()
                        .HasForeignKey("StagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DentalOffice_BE.Data.ColorDto", b =>
                {
                    b.Navigation("Processes");
                });

            modelBuilder.Entity("DentalOffice_BE.Data.DocumentConfigurationDto", b =>
                {
                    b.Navigation("Instances");
                });

            modelBuilder.Entity("DentalOffice_BE.Data.MaterialTypeDto", b =>
                {
                    b.Navigation("Materials");
                });

            modelBuilder.Entity("DentalOffice_BE.Data.ModuleDto", b =>
                {
                    b.Navigation("DocumentInstances");

                    b.Navigation("Processes");
                });

            modelBuilder.Entity("DentalOffice_BE.Data.RiskDto", b =>
                {
                    b.Navigation("Processes");
                });

            modelBuilder.Entity("DentalOffice_BE.Data.SectionDto", b =>
                {
                    b.Navigation("SubSections");
                });

            modelBuilder.Entity("DentalOffice_BE.Data.SemiProductDto", b =>
                {
                    b.Navigation("Processs");
                });
#pragma warning restore 612, 618
        }
    }
}

// <auto-generated />
using System;
using DentalOffice_BE.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DentalOffice_BE.Data.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20240309105933_0")]
    partial class _0
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DentalOffice_BE.Data.ColorDto", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("insert_date")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Code");

                    b.HasAlternateKey("Id");

                    b.ToTable("colors", "main");
                });

            modelBuilder.Entity("DentalOffice_BE.Data.CustomerDto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("insert_date")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("customers", "main");
                });

            modelBuilder.Entity("DentalOffice_BE.Data.DocumentConfigurationDto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("insert_date")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("document_configurations", "main");
                });

            modelBuilder.Entity("DentalOffice_BE.Data.DocumentInstanceDto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ConfigurationId")
                        .HasColumnType("bigint")
                        .HasColumnName("configuration_id");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("insert_date")
                        .HasDefaultValueSql("NOW()");

                    b.Property<long>("ModuleId")
                        .HasColumnType("bigint")
                        .HasColumnName("module_id");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("ConfigurationId");

                    b.HasIndex("ModuleId");

                    b.ToTable("document_instances", "main");
                });

            modelBuilder.Entity("DentalOffice_BE.Data.LotDto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ColorDtoCode")
                        .HasColumnType("text");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("insert_date")
                        .HasDefaultValueSql("NOW()");

                    b.Property<long>("MaterialId")
                        .HasColumnType("bigint")
                        .HasColumnName("material_id");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("ColorDtoCode");

                    b.HasIndex("MaterialId");

                    b.ToTable("lots", "main");
                });

            modelBuilder.Entity("DentalOffice_BE.Data.MaterialDto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("insert_date")
                        .HasDefaultValueSql("NOW()");

                    b.Property<long>("MaterialTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("material_type_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("MaterialTypeId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("materials", "main");
                });

            modelBuilder.Entity("DentalOffice_BE.Data.MaterialTypeDto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("insert_date")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("material_types", "main");
                });

            modelBuilder.Entity("DentalOffice_BE.Data.ModuleDto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("customer_name");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("delivery_date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("insert_date")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime>("PrescriptionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("prescription_date");

                    b.Property<long>("StudioId")
                        .HasColumnType("bigint")
                        .HasColumnName("studio_id");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("StudioId");

                    b.ToTable("modules", "main");
                });

            modelBuilder.Entity("DentalOffice_BE.Data.ProcessDto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ColorDtoCode")
                        .HasColumnType("text");

                    b.Property<string>("ColorId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("color_id");

                    b.Property<long>("DentinLotId")
                        .HasColumnType("bigint")
                        .HasColumnName("dentin_lot_id");

                    b.Property<long>("DentinMaterialId")
                        .HasColumnType("bigint")
                        .HasColumnName("dentin_material_id");

                    b.Property<long>("EnamelLotId")
                        .HasColumnType("bigint")
                        .HasColumnName("enamel_lot_id");

                    b.Property<long>("EnamelMaterialId")
                        .HasColumnType("bigint")
                        .HasColumnName("enamel_material_id");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("insert_date")
                        .HasDefaultValueSql("NOW()");

                    b.Property<long>("MetalLotId")
                        .HasColumnType("bigint")
                        .HasColumnName("metal_lot_id");

                    b.Property<long>("MetalMaterialId")
                        .HasColumnType("bigint")
                        .HasColumnName("metal_material_id");

                    b.Property<long?>("ModuleDtoId")
                        .HasColumnType("bigint");

                    b.Property<long>("ModuleId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RiskDtoId")
                        .HasColumnType("bigint");

                    b.Property<long>("RiskId")
                        .HasColumnType("bigint")
                        .HasColumnName("risk_id");

                    b.Property<long?>("SemiProductId")
                        .HasColumnType("bigint")
                        .HasColumnName("semiproduct_id");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("ColorDtoCode");

                    b.HasIndex("ColorId");

                    b.HasIndex("DentinLotId");

                    b.HasIndex("DentinMaterialId");

                    b.HasIndex("EnamelLotId");

                    b.HasIndex("EnamelMaterialId");

                    b.HasIndex("MetalLotId");

                    b.HasIndex("MetalMaterialId");

                    b.HasIndex("ModuleDtoId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("RiskDtoId");

                    b.HasIndex("RiskId");

                    b.HasIndex("SemiProductId");

                    b.ToTable("Processes");
                });

            modelBuilder.Entity("DentalOffice_BE.Data.RiskDto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("insert_date")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("Description")
                        .IsUnique();

                    b.ToTable("risks", "main");
                });

            modelBuilder.Entity("DentalOffice_BE.Data.SectionDto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ApiString")
                        .HasColumnType("text")
                        .HasColumnName("api_string");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("insert_date")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Route")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("route");

                    b.Property<long?>("SectionId")
                        .HasColumnType("bigint")
                        .HasColumnName("section_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("Route")
                        .IsUnique();

                    b.HasIndex("SectionId");

                    b.ToTable("sections", "main");
                });

            modelBuilder.Entity("DentalOffice_BE.Data.SemiProductDto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("insert_date")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("semiproducts", "main");
                });

            modelBuilder.Entity("DentalOffice_BE.Data.StageDto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("insert_date")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("stages", "main");
                });

            modelBuilder.Entity("DentalOffice_BE.Data.StudioDto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Color")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("color");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("insert_date")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("studios", "main");
                });

            modelBuilder.Entity("processes_stages", b =>
                {
                    b.Property<long>("ProcessesId")
                        .HasColumnType("bigint");

                    b.Property<long>("StagesId")
                        .HasColumnType("bigint");

                    b.HasKey("ProcessesId", "StagesId");

                    b.HasIndex("StagesId");

                    b.ToTable("processes_stages");
                });

            modelBuilder.Entity("DentalOffice_BE.Data.DocumentInstanceDto", b =>
                {
                    b.HasOne("DentalOffice_BE.Data.DocumentConfigurationDto", "Configuration")
                        .WithMany("Instances")
                        .HasForeignKey("ConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DentalOffice_BE.Data.ModuleDto", "Module")
                        .WithMany("Instances")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Configuration");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("DentalOffice_BE.Data.LotDto", b =>
                {
                    b.HasOne("DentalOffice_BE.Data.ColorDto", null)
                        .WithMany("Lot")
                        .HasForeignKey("ColorDtoCode");

                    b.HasOne("DentalOffice_BE.Data.MaterialDto", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");
                });

            modelBuilder.Entity("DentalOffice_BE.Data.MaterialDto", b =>
                {
                    b.HasOne("DentalOffice_BE.Data.MaterialTypeDto", "MaterialType")
                        .WithMany("Materials")
                        .HasForeignKey("MaterialTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("DentalOffice_BE.Common.Models.MaterialProperties", "MaterialProperties", b1 =>
                        {
                            b1.Property<long>("MaterialDtoId")
                                .HasColumnType("bigint");

                            b1.HasKey("MaterialDtoId");

                            b1.ToTable("materials", "main");

                            b1.ToJson("MaterialProperties");

                            b1.WithOwner()
                                .HasForeignKey("MaterialDtoId");
                        });

                    b.Navigation("MaterialProperties");

                    b.Navigation("MaterialType");
                });

            modelBuilder.Entity("DentalOffice_BE.Data.ModuleDto", b =>
                {
                    b.HasOne("DentalOffice_BE.Data.StudioDto", "Studio")
                        .WithMany()
                        .HasForeignKey("StudioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Studio");
                });

            modelBuilder.Entity("DentalOffice_BE.Data.ProcessDto", b =>
                {
                    b.HasOne("DentalOffice_BE.Data.ColorDto", null)
                        .WithMany("Processes")
                        .HasForeignKey("ColorDtoCode");

                    b.HasOne("DentalOffice_BE.Data.ColorDto", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DentalOffice_BE.Data.LotDto", "DentinLot")
                        .WithMany()
                        .HasForeignKey("DentinLotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DentalOffice_BE.Data.MaterialDto", "DentinMaterial")
                        .WithMany()
                        .HasForeignKey("DentinMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DentalOffice_BE.Data.LotDto", "EnamelLot")
                        .WithMany()
                        .HasForeignKey("EnamelLotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DentalOffice_BE.Data.MaterialDto", "EnamelMaterial")
                        .WithMany()
                        .HasForeignKey("EnamelMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DentalOffice_BE.Data.LotDto", "MetalLot")
                        .WithMany()
                        .HasForeignKey("MetalLotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DentalOffice_BE.Data.MaterialDto", "MetalMaterial")
                        .WithMany()
                        .HasForeignKey("MetalMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DentalOffice_BE.Data.ModuleDto", null)
                        .WithMany("Processes")
                        .HasForeignKey("ModuleDtoId");

                    b.HasOne("DentalOffice_BE.Data.ModuleDto", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DentalOffice_BE.Data.RiskDto", null)
                        .WithMany("Processes")
                        .HasForeignKey("RiskDtoId");

                    b.HasOne("DentalOffice_BE.Data.RiskDto", "Risk")
                        .WithMany()
                        .HasForeignKey("RiskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DentalOffice_BE.Data.SemiProductDto", "SemiProduct")
                        .WithMany("Processs")
                        .HasForeignKey("SemiProductId");

                    b.Navigation("Color");

                    b.Navigation("DentinLot");

                    b.Navigation("DentinMaterial");

                    b.Navigation("EnamelLot");

                    b.Navigation("EnamelMaterial");

                    b.Navigation("MetalLot");

                    b.Navigation("MetalMaterial");

                    b.Navigation("Module");

                    b.Navigation("Risk");

                    b.Navigation("SemiProduct");
                });

            modelBuilder.Entity("DentalOffice_BE.Data.SectionDto", b =>
                {
                    b.HasOne("DentalOffice_BE.Data.SectionDto", "Section")
                        .WithMany("SubSections")
                        .HasForeignKey("SectionId");

                    b.OwnsOne("DentalOffice_BE.Common.SectionConfiguration", "Configuration", b1 =>
                        {
                            b1.Property<long>("SectionDtoId")
                                .HasColumnType("bigint");

                            b1.Property<string>("IconName")
                                .HasColumnType("text");

                            b1.Property<string[]>("TableHeaderFields")
                                .HasColumnType("text[]");

                            b1.Property<string>("formConfigurationuration")
                                .HasColumnType("text");

                            b1.HasKey("SectionDtoId");

                            b1.ToTable("sections", "main");

                            b1.ToJson("Configuration");

                            b1.WithOwner()
                                .HasForeignKey("SectionDtoId");
                        });

                    b.Navigation("Configuration");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("processes_stages", b =>
                {
                    b.HasOne("DentalOffice_BE.Data.ProcessDto", null)
                        .WithMany()
                        .HasForeignKey("ProcessesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DentalOffice_BE.Data.StageDto", null)
                        .WithMany()
                        .HasForeignKey("StagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DentalOffice_BE.Data.ColorDto", b =>
                {
                    b.Navigation("Lot");

                    b.Navigation("Processes");
                });

            modelBuilder.Entity("DentalOffice_BE.Data.DocumentConfigurationDto", b =>
                {
                    b.Navigation("Instances");
                });

            modelBuilder.Entity("DentalOffice_BE.Data.MaterialTypeDto", b =>
                {
                    b.Navigation("Materials");
                });

            modelBuilder.Entity("DentalOffice_BE.Data.ModuleDto", b =>
                {
                    b.Navigation("Instances");

                    b.Navigation("Processes");
                });

            modelBuilder.Entity("DentalOffice_BE.Data.RiskDto", b =>
                {
                    b.Navigation("Processes");
                });

            modelBuilder.Entity("DentalOffice_BE.Data.SectionDto", b =>
                {
                    b.Navigation("SubSections");
                });

            modelBuilder.Entity("DentalOffice_BE.Data.SemiProductDto", b =>
                {
                    b.Navigation("Processs");
                });
#pragma warning restore 612, 618
        }
    }
}
